"""
author: Gabriela Pinto 
date: Feb 4, 2024

Calls OpenAi to generate the descriptions of what is going on in each video
"""
import cv2  
import base64
from openai import OpenAI
import pandas as pd

OPEN_AI_KEY = "APIKEY"
client = OpenAI(api_key=OPEN_AI_KEY)


def grabFrames(input_video):
    """
        Extracts every 300 frames of the video

        Parameters:
        str: file path to the video

        Returns:
        list: list of frames from the video
    """
    video = cv2.VideoCapture(input_video)

    base64Frames = []
    frame_count = int(video.get(cv2.CAP_PROP_FRAME_COUNT))

    # Check if the video has less than 300 frames
    if frame_count < 300:
        success, frame = video.read()
        if success:
            _, buffer = cv2.imencode(".jpg", frame)
            base64Frames.append(base64.b64encode(buffer).decode("utf-8"))
    else:
        while video.isOpened():
            success, frame = video.read()
            if not success:
                break
            _, buffer = cv2.imencode(".jpg", frame)
            base64Frames.append(base64.b64encode(buffer).decode("utf-8"))

    video.release()
    print(len(base64Frames), "frames read.")
    return base64Frames


def generateDescriptions(row):
    """
        Extracts every 300 frames of the video

        Parameters:
        pandas dataframe row: one row from the Pandas dataframe

        Returns:
        str: the description of the video, generated by gpt-4
    """

    vid_id = str(row['id']) #grab the video's id
    vid_user = row['username'] #grab the username (video publisher)
    video_file_name = "@"+vid_user+"_video_"+vid_id+".mp4"   #generate the file name of the video

    #iterate through each video here
    input_video = "FILE PATH TO VIDEOS DIRECTORY/"+video_file_name

    #extract the frames from the video
    base64Frames = grabFrames(input_video)

    #sent the prompt to GPT-4
    PROMPT_MESSAGES = [
        {
            "role": "user",
            "content": [
                "These are frames from a video that I want to upload. Generate an objective description of the video and in a separate paragraph could you provide the text that is displayed in the video.",
                *map(lambda x: {"image": x, "resize": 768}, base64Frames[0::300]),
            ],
        },
    ]

    #send the prompt to GPT-4
    params = {
        "model": "gpt-4-vision-preview",
        "messages": PROMPT_MESSAGES,
        "max_tokens": 200,
    }
    result = client.chat.completions.create(**params)
    return result.choices[0].message.content


filePath = "FILENAME.csv"
df = pd.read_csv(filePath)

#new file will contain the descriptions generated by gpt-4
df['description_video_gpt4']=df.apply(generateDescriptions,axis=1)
df.to_csv("FILENAME.csv",index=False)